a quick preview
Find All Users Who Are 18 or older
code :
SELECT * FROM Users WHERE Age >= 18;

the general command for creating a database :
CREATE DATABASE <name>;

example :
CREATE DATABASE soap_store;
CREATE DATABASE DogApp;
CREATE DATABASE My_App;

jangan pakai spasi

start the CLI : 
mysql-ctl cli;

List available databases:
show databases;

cara delete database 
DROP DATABASE <name>;
example : 
DROP DATABASE hello_world_db;

cara menggunakan database: 
USE <database name>;
dan kita bisa pindah ke database yg lain
example :
USE dog_walking_app;

SELECT database();

a databases is just a bunch of tables

Numeric Types in Database :
- INT
- SMALLINT
- TINYINT
- MEDIUMINT
- BIGINT
- DECIMAL
- NUMERIC
- FLOAT
- DOUBLE
- BIT

String Types in Database : 
- CHAR
- VARCHAR
- BINARY
- VARBINARY
- BLOB
- TINYBLOB
- MEDIUMBLOB
- LONGBLOB
- TEXT
- TINYTEXT
- MEDIUMTEXT
- LONGTEXT
- ENUM

Date Types in Database : 
- DATE
- DATETIME
- TIMESTAMP
- TIME
- YEAR

INT is a Whole Number with a max value of 4294967295
VARCHAR is a Variable-Length string between 1 and 255 characters

cara buat table 
CREATE TABLE <NAMA>();
example : 
CREATE TABLE tablename 
 (
	column_name data_type,
	column_name data_type
 );

CREATE TABLES cats
 (
	name VARCHAR(100),
	age INT
 );

cara cek table di database

    SHOW TABLES;
example :
SHOW TABLES cats;
     
    SHOW COLUMNS FROM tablename;
example :
SHOW COLUMN FROM cats;
	
cara gampang nya menggunakan DESC <tablename>;     
    DESC tablename;
example :
DESC cats;

cara delete Table 

DROP TABLE <tablename>;
example :
DROP TABLE cats;

NOTE : Be careful with this command !!

INSERT 
adding data to your tables !
syntax nya :
INSERT INTO <tablename> (variable yg ada didalam table)
VALUES (isi variable yg digunakan);

example: 
INSERT INTO cats (name, age)
VALUES ('Jetson', 7);


Inserting Data


The "formula":

    INSERT INTO table_name(column_name) VALUES (data);

For example:

    INSERT INTO cats(name, age) VALUES ('Jetson', 7);

SELECT * FROM cats;

CODE: Multiple Insert

    INSERT INTO table_name 
                (column_name, column_name) 
    VALUES      (value, value), 
                (value, value), 
                (value, value);



CODE: INSERT Challenges Solution
INSERT Challenge Solution Code

    CREATE TABLE people
      (
        first_name VARCHAR(20),
        last_name VARCHAR(20),
        age INT
      );

    INSERT INTO people(first_name, last_name, age)
    VALUES ('Tina', 'Belcher', 13);

    INSERT INTO people(age, last_name, first_name)
    VALUES (42, 'Belcher', 'Bob');

    INSERT INTO people(first_name, last_name, age)
    VALUES('Linda', 'Belcher', 45)
      ,('Phillip', 'Frond', 38)
      ,('Calvin', 'Fischoeder', 70);

DROP TABLE people; 

SELECT * FROM people; 

show tables; 

untuk melihat warning yg ada di Mysql

SHOW WARNINGS; 

NULL is The Value is Not Unknown and Null doesnt mean Zero !

CREATE TABLE <name> (
	variable type NOT NULL,
	variable type NOT NULL 
);

example :
CREATE TABLE cats2 (
	name VARCHAR(100) NOT NULL,
	age INT NOT NULL
);

CODE: NULL and NOT NULL
NULL and NOT NULL Code

Try inserting a cat without an age:

INSERT INTO cats(name) VALUES('Alabama'); 

SELECT * FROM cats; 

Try inserting a nameless and ageless cat:

INSERT INTO cats() VALUES(); 

Define a new cats2 table with NOT NULL constraints:


    CREATE TABLE cats2
      (
        name VARCHAR(100) NOT NULL,
        age INT NOT NULL
      );

DESC cats2; 

Now try inserting an ageless cat:

INSERT INTO cats2(name) VALUES('Texas'); 

View the new warnings:

SHOW WARNINGS; 

SELECT * FROM cats2; 

Do the same for a nameless cat:

INSERT INTO cats2(age) VALUES(7); 

SHOW WARNINGS; 


CODE: Setting Default Values
CODE: Setting Default Values 

Define a table with a DEFAULT name specified:

    CREATE TABLE cats3
      (
        name VARCHAR(20) DEFAULT 'no name provided',
        age INT DEFAULT 99
      );

Notice the change when you describe the table:

DESC cats3; 

Insert a cat without a name:

INSERT INTO cats3(age) VALUES(13); 

Or a nameless, ageless cat:

INSERT INTO cats3() VALUES(); 

Combine NOT NULL and DEFAULT:

    CREATE TABLE cats4
      (
        name VARCHAR(20) NOT NULL DEFAULT 'unnamed',
        age INT NOT NULL DEFAULT 99
      );

  
Notice The Difference:

    INSERT INTO cats() VALUES();
     
    SELECT * FROM cats;
     
    INSERT INTO cats3() VALUES();
     
    SELECT * FROM cats3;
     
    INSERT INTO cats3(name, age) VALUES('Montana', NULL);
     
    SELECT * FROM cats3;
     
    INSERT INTO cats4(name, age) VALUES('Cali', NULL);

PRIMARY KEY a unique identifier 


CODE: Primary Keys

Define a table with a PRIMARY KEY constraint:

    CREATE TABLE unique_cats
      (
        cat_id INT NOT NULL,
        name VARCHAR(100),
        age INT,
        PRIMARY KEY (cat_id)
      );

DESC unique_cats; 

Insert some new cats:

    INSERT INTO unique_cats(cat_id, name, age) VALUES(1, 'Fred', 23);
     
    INSERT INTO unique_cats(cat_id, name, age) VALUES(2, 'Louise', 3);
     
    INSERT INTO unique_cats(cat_id, name, age) VALUES(1, 'James', 3);

Notice what happens:

SELECT * FROM unique_cats; 

Adding in AUTO_INCREMENT:

    CREATE TABLE unique_cats2 (
        cat_id INT NOT NULL AUTO_INCREMENT,
        name VARCHAR(100),
        age INT,
        PRIMARY KEY (cat_id)
    );

INSERT a couple new cats:

    INSERT INTO unique_cats2(name, age) VALUES('Skippy', 4);
    INSERT INTO unique_cats2(name, age) VALUES('Jiff', 3);
    INSERT INTO unique_cats2(name, age) VALUES('Jiff', 3);
    INSERT INTO unique_cats2(name, age) VALUES('Jiff', 3);
    INSERT INTO unique_cats2(name, age) VALUES('Skippy', 4);

Notice the difference:

SELECT * FROM unique_cats2; 

CODE: Table Constraints Exercise Solution
Table Constraints Exercise Solution

Defining The employees table:

    CREATE TABLE employees (
        id INT AUTO_INCREMENT NOT NULL,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        middle_name VARCHAR(255),
        age INT NOT NULL,
        current_status VARCHAR(255) NOT NULL DEFAULT 'employed',
        PRIMARY KEY(id)
    );

Another way of defining a primary key:


    CREATE TABLE employees (
        id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        middle_name VARCHAR(255),
        age INT NOT NULL,
        current_status VARCHAR(255) NOT NULL DEFAULT 'employed'
    );

A test INSERT:

    INSERT INTO employees(first_name, last_name, age) VALUES
    ('Dora', 'Smith', 58);

CRUD 
Create
Read
Update
Delete

CODE: Preparing Our Data

Let's drop the existing cats table:

DROP TABLE cats; 

Recreate a new cats table:

    CREATE TABLE cats 
      ( 
         cat_id INT NOT NULL AUTO_INCREMENT, 
         name   VARCHAR(100), 
         breed  VARCHAR(100), 
         age    INT, 
         PRIMARY KEY (cat_id) 
      ); 

DESC cats; 

And finally insert some new cats:

    INSERT INTO cats(name, breed, age) 
    VALUES ('Ringo', 'Tabby', 4),
           ('Cindy', 'Maine Coon', 10),
           ('Dumbledore', 'Maine Coon', 11),
           ('Egg', 'Persian', 4),
           ('Misty', 'Tabby', 13),
           ('George Michael', 'Ragdoll', 9),
           ('Jackson', 'Sphynx', 7);

Various Simple SELECT statements:

SELECT * FROM cats; 

SELECT name FROM cats; 

SELECT age FROM cats; 

SELECT cat_id FROM cats; 

SELECT name, age FROM cats; 

SELECT cat_id, name, age FROM cats; 

SELECT age, breed, name, cat_id FROM cats; 

SELECT cat_id, name, age, breed FROM cats; 


CODE: Introduction to WHERE

Select by age:

SELECT * FROM cats WHERE age=4; 

Select by name:

SELECT * FROM cats WHERE name='Egg'; 

Notice how it deals with case:

SELECT * FROM cats WHERE name='egG'; 

CODE: Select Challenges Solution

SELECT cat_id FROM cats; 

SELECT name, breed FROM cats; 

SELECT name, age FROM cats WHERE breed='Tabby'; 

SELECT cat_id, age FROM cats WHERE cat_id=age; 

SELECT * FROM cats WHERE cat_id=age; 


CODE: Introduction to Aliases

    SELECT cat_id AS id, name FROM cats;
     
    SELECT name AS 'cat name', breed AS 'kitty breed' FROM cats;
     
    DESC cats;


CODE: Updating Data

Change tabby cats to shorthair:

UPDATE cats SET breed='Shorthair' WHERE breed='Tabby'; 

Another update:

UPDATE cats SET age=14 WHERE name='Misty'; 


CODE: Update Challenges Solution

    SELECT * FROM cats WHERE name='Jackson';
     
    UPDATE cats SET name='Jack' WHERE name='Jackson';
     
    SELECT * FROM cats WHERE name='Jackson';
     
    SELECT * FROM cats WHERE name='Jack';
     
    SELECT * FROM cats WHERE name='Ringo';
     
    UPDATE cats SET breed='British Shorthair' WHERE name='Ringo';
     
    SELECT * FROM cats WHERE name='Ringo';
     
    SELECT * FROM cats;
     
    SELECT * FROM cats WHERE breed='Maine Coon';
     
    UPDATE cats SET age=12 WHERE breed='Maine Coon';
     
    SELECT * FROM cats WHERE breed='Maine Coon';


CODE: DELETING DATA

    DELETE FROM cats WHERE name='Egg';
     
    SELECT * FROM cats;
     
    SELECT * FROM cats WHERE name='egg';
     
    DELETE FROM cats WHERE name='egg';
     
    SELECT * FROM cats;
     
    DELETE FROM cats;


CODE: DELETE Challenges Solution

    SELECT * FROM cats WHERE age=4;
     
    DELETE FROM cats WHERE age=4;
     
    SELECT * FROM cats WHERE age=4;
     
    SELECT * FROM cats;
     
    SELECT *  FROM cats WHERE cat_id=age;
     
    DELETE FROM cats WHERE cat_id=age;
     
    DELETE FROM cats;
     
    SELECT * FROM cats;

CODE: CRUD Exercise Create Solution

    SELECT database();
     
    CREATE DATABASE shirts_db;
     
    use shirts_db;
     
    SELECT database();
     
    CREATE TABLE shirts
      (
        shirt_id INT NOT NULL AUTO_INCREMENT,
        article VARCHAR(100),
        color VARCHAR(100),
        shirt_size VARCHAR(100),
        last_worn INT,
        PRIMARY KEY(shirt_id)
      );
     
    DESC shirts;
     
    INSERT INTO shirts(article, color, shirt_size, last_worn) VALUES
    ('t-shirt', 'white', 'S', 10),
    ('t-shirt', 'green', 'S', 200),
    ('polo shirt', 'black', 'M', 10),
    ('tank top', 'blue', 'S', 50),
    ('t-shirt', 'pink', 'S', 0),
    ('polo shirt', 'red', 'M', 5),
    ('tank top', 'white', 'S', 200),
    ('tank top', 'blue', 'M', 15);
     
    SELECT * FROM shirts;
     
    INSERT INTO shirts(color, article, shirt_size, last_worn) 
    VALUES('purple', 'polo shirt', 'medium', 50);
     
    SELECT * FROM shirts;



    SELECT * FROM shirts WHERE article='polo shirt';
     
    UPDATE shirts SET shirt_size='L' WHERE article='polo shirt';
     
    SELECT * FROM shirts WHERE article='polo shirt';
     
    SELECT * FROM shirts;
     
    SELECT * FROM shirts WHERE last_worn=15;
     
    UPDATE shirts SET last_worn=0 WHERE last_worn=15;
     
    SELECT * FROM shirts WHERE last_worn=15;
     
    SELECT * FROM shirts WHERE last_worn=0;
     
    SELECT * FROM shirts WHERE color='white';
     
    UPDATE shirts SET color='off white', shirt_size='XS' WHERE color='white';
     
    SELECT * FROM shirts WHERE color='white';
     
    SELECT * FROM shirts WHERE color='off white';
     
    SELECT * FROM shirts;


CODE: CRUD Exercise Delete Solution

    SELECT * FROM shirts;
     
    SELECT * FROM shirts WHERE last_worn=200;
     
    DELETE FROM shirts WHERE last_worn=200;
     
    SELECT * FROM shirts WHERE article='tank top';
     
    DELETE FROM shirts WHERE article='tank top';
     
    SELECT * FROM shirts WHERE article='tank top';
     
    SELECT * FROM shirts;
     
    DELETE FROM shirts;
     
    SELECT * FROM shirts;
     
    DROP TABLE shirts;
     
    show tables;
     
    DESC shirts;


CODE: Running SQL Files

    CREATE TABLE cats
        (
            cat_id INT NOT NULL AUTO_INCREMENT,
            name VARCHAR(100),
            age INT,
            PRIMARY KEY(cat_id)
        );
     
    mysql-ctl cli
     
    use cat_app;
     
    source first_file.sql
     
    DESC cats;
     
     
     
    INSERT INTO cats(name, age)
    VALUES('Charlie', 17);
     
    INSERT INTO cats(name, age)
    VALUES('Connie', 10);
     
    SELECT * FROM cats;
     
    source testing/insert.sql


CODE: Loading Our Book Data

1. First create your book_data.sql file with the following code:

    DROP DATABASE IF EXISTS book_shop;
    CREATE DATABASE book_shop;
    USE book_shop; 
    DROP DATABASE IF EXISTS book_shop;
    CREATE DATABASE book_shop;
    USE book_shop; 
     
    CREATE TABLE books 
    	(
    		book_id INT NOT NULL AUTO_INCREMENT,
    		title VARCHAR(100),
    		author_fname VARCHAR(100),
    		author_lname VARCHAR(100),
    		released_year INT,
    		stock_quantity INT,
    		pages INT,
    		PRIMARY KEY(book_id)
    	);
     
    INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
    VALUES
    ('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
    ('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
    ('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
    ('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
    ('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
    ('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
    ('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
    ('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
    ('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
    ('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
    ('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
    ("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
    ('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
    ('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
    ('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
    ('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);




2. Then source that file
source book_data.sql 

3. Now check your work:

    DESC books;
    SELECT * FROM books; 

CODE: Working With CONCAT

    SELECT author_fname, author_lname FROM books;
     
    CONCAT(x,y,z) // from slides
     
    CONCAT(column, anotherColumn) // from slides
     
    CONCAT(author_fname, author_lname)
     
    CONCAT(column, 'text', anotherColumn, 'more text')
     
    CONCAT(author_fname, ' ', author_lname)
     
    CONCAT(author_fname, author_lname); // invalid syntax
     
    SELECT CONCAT('Hello', 'World');
     
    SELECT CONCAT('Hello', '...', 'World');
     
    SELECT
      CONCAT(author_fname, ' ', author_lname)
    FROM books;
     
    SELECT
      CONCAT(author_fname, ' ', author_lname)
      AS 'full name'
    FROM books;
     
    SELECT author_fname AS first, author_lname AS last, 
      CONCAT(author_fname, ' ', author_lname) AS full
    FROM books;
     
    SELECT author_fname AS first, author_lname AS last, 
      CONCAT(author_fname, ', ', author_lname) AS full
    FROM books;
     
    SELECT CONCAT(title, '-', author_fname, '-', author_lname) FROM books;
     
    SELECT 
        CONCAT_WS(' - ', title, author_fname, author_lname) 
    FROM books;


CODE: Introducing SUBSTRING

    SELECT SUBSTRING('Hello World', 1, 4);
     
    SELECT SUBSTRING('Hello World', 7);
     
    SELECT SUBSTRING('Hello World', 3, 8);
     
    SELECT SUBSTRING('Hello World', 3);
     
    SELECT SUBSTRING('Hello World', -3);
     
    SELECT SUBSTRING('Hello World', -7);
     
    SELECT title FROM books;
     
    SELECT SUBSTRING("Where I'm Calling From: Selected Stories", 1, 10);
     
    SELECT SUBSTRING(title, 1, 10) FROM books;
     
    SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;
     
    SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;
     
    SELECT CONCAT
        (
            SUBSTRING(title, 1, 10),
            '...'
        )
    FROM books;
     
    source book_code.sql
     
    SELECT CONCAT
        (
            SUBSTRING(title, 1, 10),
            '...'
        ) AS 'short title'
    FROM books;
     
    source book_code.sql


CODE: Introducing REPLACE

    SELECT REPLACE('Hello World', 'Hell', '%$#@');
     
    SELECT REPLACE('Hello World', 'l', '7');
     
    SELECT REPLACE('Hello World', 'o', '0');
     
    SELECT REPLACE('HellO World', 'o', '*');
     
    SELECT
      REPLACE('cheese bread coffee milk', ' ', ' and ');
     
    SELECT REPLACE(title, 'e ', '3') FROM books;
     
    -- SELECT
    --    CONCAT
    --    (
    --        SUBSTRING(title, 1, 10),
    --        '...'
    --    ) AS 'short title'
    -- FROM books;
     
    SELECT
        SUBSTRING(REPLACE(title, 'e', '3'), 1, 10)
    FROM books;
     
    SELECT
        SUBSTRING(REPLACE(title, 'e', '3'), 1, 10) AS 'weird string'
    FROM books;

CODE: Using REVERSE

    SELECT REVERSE('Hello World');
     
    SELECT REVERSE('meow meow');
     
    SELECT REVERSE(author_fname) FROM books;
     
    SELECT CONCAT('woof', REVERSE('woof'));
     
    SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;


sql-format.com


CODE: Working with CHAR LENGTH

    SELECT CHAR_LENGTH('Hello World');
     
    SELECT author_lname, CHAR_LENGTH(author_lname) AS 'length' FROM books;
     
    SELECT CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' character long') FROM books;

CODE: Changing Case with UPPER and LOWER

    SELECT UPPER('Hello World');
     
    SELECT LOWER('Hello World');
     
    SELECT UPPER(title) FROM books;
     
    SELECT CONCAT('MY FAVORITE BOOK IS ', UPPER(title)) FROM books;
     
    SELECT CONCAT('MY FAVORITE BOOK IS ', LOWER(title)) FROM books;


This works:

    SELECT UPPER(CONCAT(author_fname, ' ', author_lname)) AS "full name in caps"
    FROM books;

While this does not:

    SELECT CONCAT(UPPER(author_fname, ' ', author_lname)) AS "full name in caps" 
    FROM books;

You could do it this way, however:

    SELECT CONCAT(UPPER(author_fname), ' ', UPPER(author_lname)) AS "full name in caps" 
    FROM books;

REVERSE & UPPER/LOWER CODE
	SELECT REVERSE(UPPER('Why does my cat look at me with such hatred?'));
OR
	SELECT UPPER(REVERSE('Why does my cat look at me with such hatred?'));
both has same output.

SELECT REPLACE(title, ' ', '->') AS title FROM books;

SELECT author_lname AS 'forwards', REVERSE(author_lname) AS 'backwards' FROM books;

SELECT CONCAT(title, ' was released in ', released_year) AS 'blurb' FROM books;

SELECT title, CHAR_LENGTH(title) AS 'character count' FROM books;

SELECT
    REPLACE (
        CONCAT ('I', ' ', 'like', ' ', 'cats'),
        ' ','-'
    );

SELECT
    CONCAT(SUBSTR(title, 1, 10), '...') AS 'short title',
    CONCAT(author_lname,',', author_fname) AS author,
    CONCAT(stock_quantity,' in stock') AS quantity
FROM books;



CODE: Using DISTINCT

    SELECT author_lname FROM books;
     
    SELECT DISTINCT author_lname FROM books;
     
    SELECT author_fname, author_lname FROM books;
     
    SELECT DISTINCT CONCAT(author_fname,' ', author_lname) FROM books;
     
    SELECT DISTINCT author_fname, author_lname FROM books;


CODE: Sorting Data with ORDER BY

    SELECT author_lname FROM books;
     
    SELECT author_lname FROM books ORDER BY author_lname;
     
    SELECT title FROM books;
     
    SELECT title FROM books ORDER BY title;
    SELECT author_lname FROM books ORDER BY author_lname DESC;
     
    SELECT released_year FROM books;
     
    SELECT released_year FROM books ORDER BY released_year;
     
    SELECT released_year FROM books ORDER BY released_year DESC;
     
    SELECT released_year FROM books ORDER BY released_year ASC;
     
    SELECT title, released_year, pages FROM books ORDER BY released_year;
     
    SELECT title, pages FROM books ORDER BY released_year;
     
    SELECT title, author_fname, author_lname 
    FROM books ORDER BY 2;
     
    SELECT title, author_fname, author_lname 
    FROM books ORDER BY 3;
     
    SELECT title, author_fname, author_lname 
    FROM books ORDER BY 1;
     
    SELECT title, author_fname, author_lname 
    FROM books ORDER BY 1 DESC;
    
    SELECT author_lname, title
    FROM books ORDER BY 2;
     
    SELECT author_fname, author_lname FROM books 
    ORDER BY author_lname, author_fname;


CODE: Using LIMIT

    SELECT title FROM books LIMIT 3;
     
    SELECT title FROM books LIMIT 1;
     
    SELECT title FROM books LIMIT 10;
     
    SELECT * FROM books LIMIT 1;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 5;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 1;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 14;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 0,5;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 0,3;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 1,3;
     
    SELECT title, released_year FROM books 
    ORDER BY released_year DESC LIMIT 10,1;
     
    SELECT * FROM tbl LIMIT 95,18446744073709551615;
     
    SELECT title FROM books LIMIT 5;
     
    SELECT title FROM books LIMIT 5, 123219476457;
     
    SELECT title FROM books LIMIT 5, 50;


CODE: Better Searches with LIKE

    SELECT title, author_fname FROM books WHERE author_fname LIKE '%da%';
     
    SELECT title, author_fname FROM books WHERE author_fname LIKE 'da%';
     
    SELECT title FROM books WHERE  title LIKE 'the';
     
    SELECT title FROM books WHERE  title LIKE '%the';
     
    SELECT title FROM books WHERE title LIKE '%the%';


CODE: LIKE Part 2: More Wildcards

    SELECT title, stock_quantity FROM books;
     
    SELECT title, stock_quantity FROM books WHERE stock_quantity LIKE '____';
     
    SELECT title, stock_quantity FROM books WHERE stock_quantity LIKE '__';
     
    (235)234-0987 LIKE '(___)___-____'
     
    SELECT title FROM books;
     
    SELECT title FROM books WHERE title LIKE '%\%%'
     
    SELECT title FROM books WHERE title LIKE '%\_%'


CODE: Refining Selections Exercises Solution

    SELECT title FROM books WHERE title LIKE '%stories%';
     
    SELECT title, pages FROM books ORDER BY pages DESC LIMIT 1;
     
    SELECT 
        CONCAT(title, ' - ', released_year) AS summary 
    FROM books ORDER BY released_year DESC LIMIT 3;
     
    SELECT title, author_lname FROM books WHERE author_lname LIKE '% %';
     
    SELECT title, released_year, stock_quantity 
    FROM books ORDER BY stock_quantity LIMIT 3;
     
    SELECT title, author_lname 
    FROM books ORDER BY author_lname, title;
     
    SELECT title, author_lname 
    FROM books ORDER BY 2,1;
     
    SELECT
        CONCAT(
            'MY FAVORITE AUTHOR IS ',
            UPPER(author_fname),
            ' ',
            UPPER(author_lname),
            '!'
        ) AS yell
    FROM books ORDER BY author_lname;